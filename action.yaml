name: agnostella - pipx install
description: Install and cache packages with pipx
author: agnostella
branding:
  icon: terminal
  color: blue

inputs:
  package-specs:
    description: Package to install with pipx
    required: true

outputs:
  cache-hit:
    description: Whether the cache was hit or not
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Setup pipx environment
      id: setup
      shell: bash
      # pipx default home and bin dir are not writable by the cache action
      # so override them here and add the bin dir to PATH for later steps.
      # This also ensures the pipx cache only contains the tools being installed.
      run: |
        PIPX_CACHE="${{ runner.temp }}/.pipx_cache"
        PIPX_BIN_DIR="${PIPX_CACHE}/bin"

        # Replace newlines with spaces and trim leading/trailing whitespace
        PACKAGE_SPECS=$(cat << 'EOF' | tr '\n' ' ' | sed -E 's/(^\s+|\s+$)//g'
        ${{ inputs.package-specs }}
        EOF
        )

        cache_key=$(echo "${PACKAGE_SPECS}" | tr ' ' '-' | tr ',' '_' | tr -d '"' | tr -d "'")
        echo "pipx-cache-key=${cache_key}" >> $GITHUB_OUTPUT

        echo "pipx-package-specs=${PACKAGE_SPECS}" >> $GITHUB_OUTPUT
        echo "pipx-cache-path=${PIPX_CACHE}" >> $GITHUB_OUTPUT
        echo "pipx-major-version=$(pipx --version | cut -d '.' -f1)" >> $GITHUB_OUTPUT
        echo "python-version=$(python --version)" >> $GITHUB_OUTPUT

        echo "PIPX_HOME=${PIPX_CACHE}/home" >> $GITHUB_ENV
        echo "PIPX_MAN_DIR=${PIPX_CACHE}/man" >> $GITHUB_ENV
        echo "PIPX_BIN_DIR=${PIPX_CACHE}/bin" >> $GITHUB_ENV

        echo "${PIPX_BIN_DIR}" >> $GITHUB_PATH

    - name: Cache pipx environment
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup.outputs.pipx-cache-path }}
        key: ${{ runner.os }}-python${{ steps.setup.outputs.python-version }}-pipx${{ steps.setup.outputs.pipx-major-version }}-${{ steps.setup.outputs.pipx-cache-key }}

    - name: Install packages
      if: ${{ !cancelled() }}
      shell: bash
      run: |
        python -m pip install --upgrade pip pipx
        cache_hit="${{ steps.cache.outputs.cache-hit }}"
        if [[ "${cache_hit}" != "true" ]]; then
          python -m pipx install ${{ steps.setup.outputs.pipx-package-specs }}
        fi

        echo "Installed pipx packages:"
        python -m pipx list
